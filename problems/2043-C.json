{
    "statement": "You are given an array\na\nof\nn\nintegers, where all elements except for at most one are equal to\n−1\nor\n1\n. The remaining element\nx\nsatisfies\n−109≤x≤109\n.\nFind all possible sums of subarrays of\na\n, including the empty subarray, whose sum is defined as\n0\n. In other words, find all integers\nx\nsuch that the array\na\nhas at least one subarray (possibly empty) with sum equal to\nx\n. A subarray is a contiguous subsegment of an array.\nOutput these sums in ascending order. Each sum should be printed only once, even if it is achieved by multiple subarrays.",
    "input_specification": "The first line contains a single integer\nt\n(\n1≤t≤104\n) — the number of test cases. Then,\nt\ntest cases follow.\nEach test case consists of two lines:\nAdditional constraint on the input: the sum of\nn\nover all test cases does not exceed\n2⋅105\n.",
    "output_specification": "For each test case, output two lines:\nEach sum should be printed only once, even if it is produced by multiple subarrays.",
    "sample_tests": [
        {
            "input": "5\n5\n1 -1 10 1 1\n5\n-1 -1 -1 -1 -1\n2\n-1 2\n2\n7 1\n3\n1 4 -1",
            "output": "8\n-1 0 1 2 9 10 11 12 \n6\n-5 -4 -3 -2 -1 0 \n4\n-1 0 1 2 \n4\n0 1 7 8 \n6\n-1 0 1 3 4 5"
        }
    ],
    "note": "Let's define\n𝑎[𝑖,𝑗]\nas the subarray of\n𝑎\nfrom position\n𝑖\nto position\n𝑗\n.\nConsider the first test case of the example:",
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "math"
    ],
    "rating": "1600"
}