{
    "statement": "As a tester, when my solution has a different output from the example during testing, I suspect the author first.\n— Chris, a comment\nAlthough Iris occasionally sets a problem where the solution is possibly wrong, she still insists on creating problems with her imagination; after all, everyone has always been on the road with their stubbornness... And like ever before, Iris has set a problem to which she gave a wrong solution, but Chris is always supposed to save it! You are going to play the role of Chris now:\nChris is given two arrays\n𝑎\nand\n𝑏\n, both consisting of\n𝑛\nintegers.\nIris is interested in the largest possible value of\n𝑃=\n∏\n𝑖=1\n𝑛\nmin(\n𝑎\n𝑖\n,\n𝑏\n𝑖\n)\nafter an arbitrary rearrangement of\n𝑏\n. Note that she only wants to know the maximum value of\n𝑃\n, and no actual rearrangement is performed on\n𝑏\n.\nThere will be\n𝑞\nmodifications. Each modification can be denoted by two integers\n𝑜\nand\n𝑥\n(\n𝑜\nis either\n1\nor\n2\n,\n1≤𝑥≤𝑛\n). If\n𝑜=1\n, then Iris will increase\n𝑎\n𝑥\nby\n1\n; otherwise, she will increase\n𝑏\n𝑥\nby\n1\n.\nIris asks Chris the maximum value of\n𝑃\nfor\n𝑞+1\ntimes: once before any modification, then after every modification.\nSince\n𝑃\nmight be huge, Chris only needs to calculate it modulo\n998244353\n.\nChris soon worked out this problem, but he was so tired that he fell asleep. Besides saying thanks to Chris, now it is your turn to write a program to calculate the answers for given input data.\nNote: since the input and output are large, you may need to optimize them for this problem.\nFor example, in C++, it is enough to use the following lines at the start of the main() function:\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr); std::cout.tie(nullptr);\n}",
    "input_specification": "Each test contains multiple test cases. The first line of input contains a single integer\n𝑡\n(\n1≤𝑡≤\n10\n4\n) — the number of test cases. The description of test cases follows.\nThe first line of each test case contains two integers\n𝑛\nand\n𝑞\n(\n1≤𝑛≤2⋅\n10\n5\n,\n1≤𝑞≤2⋅\n10\n5\n) — the length of the array and the number of operations.\nThe second line of each test case contains\n𝑛\nintegers\n𝑎\n1\n,\n𝑎\n2\n,…,\n𝑎\n𝑛\n(\n1≤\n𝑎\n𝑖\n≤5⋅\n10\n8\n) — the array\n𝑎\n.\nThe third line of each test case contains\n𝑛\nintegers\n𝑏\n1\n,\n𝑏\n2\n,…,\n𝑏\n𝑛\n(\n1≤\n𝑏\n𝑖\n≤5⋅\n10\n8\n) — the array\n𝑏\n.\nThen\n𝑞\nlines follow, each line contains two integers\n𝑜\nand\n𝑥\n(\n𝑜∈{1,2}\n,\n1≤𝑥≤𝑛\n), representing an operation.\nIt's guaranteed that the sum of\n𝑛\nand the sum of\n𝑞\nover all test cases does not exceed\n4⋅\n10\n5\n, respectively.",
    "output_specification": "For each test case, output\n𝑞+1\nintegers in a line, representing the answers that Chris will calculate, modulo\n998244353\n.",
    "sample_tests": [
        {
            "input": "4\n3 4\n1 1 2\n3 2 1\n1 3\n2 3\n1 1\n2 1\n6 8\n1 4 2 7 3 5\n7 6 5 6 3 3\n2 5\n1 6\n1 5\n1 5\n1 5\n2 3\n2 3\n1 6\n13 8\n7 7 6 6 5 5 5 2 2 3 4 5 1\n1 4 1 9 6 6 9 1 5 1 3 8 4\n2 2\n2 11\n2 4\n2 4\n1 7\n1 1\n2 12\n1 5\n5 3\n10000000 20000000 30000000 40000000 50000000\n10000000 20000000 30000000 40000000 50000000\n1 1\n2 2\n2 1",
            "output": "2 3 3 6 6\n840 840 1008 1344 1680 2016 2016 2016 2352\n2116800 2646000 3528000 3528000 3528000 4233600 4838400 4838400 4838400\n205272023 205272023 205272023 264129429"
        }
    ],
    "note": "In the first test case:",
    "tags": [
        "binary search",
        "data structures",
        "greedy",
        "math",
        "schedules",
        "sortings"
    ],
    "rating": "1700"
}