{
    "statement": "Evirir the dragon has many friends. They have 3 friends! That is one more than the average dragon.\nYou are given integers\n𝑛\n,\n𝑥\n, and\n𝑦\n. There are\n𝑛\ndragons sitting in a circle. The dragons are numbered\n1,2,…,𝑛\n. For each\n𝑖\n(\n1≤𝑖≤𝑛\n), dragon\n𝑖\nis friends with dragon\n𝑖−1\nand\n𝑖+1\n, where dragon\n0\nis defined to be dragon\n𝑛\nand dragon\n𝑛+1\nis defined to be dragon\n1\n. Additionally, dragons\n𝑥\nand\n𝑦\nare friends with each other (if they are already friends, this changes nothing). Note that all friendships are mutual.\nOutput\n𝑛\nnon-negative integers\n𝑎\n1\n,\n𝑎\n2\n,…,\n𝑎\n𝑛\nsuch that for each dragon\n𝑖\n(\n1≤𝑖≤𝑛\n), the following holds:\nLet\n𝑓\n1\n,\n𝑓\n2\n,…,\n𝑓\n𝑘\nbe the friends of dragon\n𝑖\n. Then\n𝑎\n𝑖\n=mex(\n𝑎\n𝑓\n1\n,\n𝑎\n𝑓\n2\n,…,\n𝑎\n𝑓\n𝑘\n)\n.\n∗\n∗\nThe minimum excluded (MEX) of a collection of integers\n𝑐\n1\n,\n𝑐\n2\n,…,\n𝑐\n𝑚\nis defined as the smallest non-negative integer\n𝑡\nwhich does not occur in the collection\n𝑐\n.",
    "input_specification": "Each test contains multiple test cases. The first line contains the number of test cases\n𝑡\n(\n1≤𝑡≤\n10\n4\n). The description of the test cases follows.\nThe first and only line of each test case contains three integers\n𝑛\n,\n𝑥\n,\n𝑦\n(\n3≤𝑛≤2⋅\n10\n5\n,\n1≤𝑥<𝑦≤𝑛\n).\nIt is guaranteed that the sum of\n𝑛\nover all test cases does not exceed\n2⋅\n10\n5\n.",
    "output_specification": "For each test case, output\n𝑛\nspace-separated non-negative integers\n𝑎\n1\n,\n𝑎\n2\n,…,\n𝑎\n𝑛\n(\n0≤\n𝑎\n𝑖\n≤\n10\n9\n) on a line that satisfy the condition in the statement. If there are multiple solutions, print any of them. It can be proven that under the problem constraints, a solution with\n0≤\n𝑎\n𝑖\n≤\n10\n9\nalways exists.",
    "sample_tests": [
        {
            "input": "7\n5 1 3\n4 2 4\n6 3 5\n7 3 6\n3 2 3\n5 1 5\n6 2 5",
            "output": "0 2 1 0 1\n1 2 1 0\n1 2 0 1 2 0\n0 1 2 0 1 0 1\n2 0 1\n1 0 2 1 0\n0 1 2 0 2 1"
        }
    ],
    "note": "For the first test case:",
    "tags": [
        "brute force",
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "rating": "1500"
}