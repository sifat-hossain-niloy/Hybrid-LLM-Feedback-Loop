{
    "statement": "Archimedes conducted his famous experiments on buoyancy. But not everyone knows that while he was taking a bath, he was too focused and didn't notice the moment when the water overflowed over the edge of the bath and flooded the floor near the wall. His expensive parquet was irreversibly damaged!\nArchimedes noticed that not all was lost, and there were still several undamaged parquet pieces. The parquet near the wall had the shape of a long narrow stripe of\n2×n\ncells. Archimedes had an unlimited supply of\n1×2\nparquet pieces that could be placed parallel or perpendicular to the wall. Archimedes didn't want to cut the parquet pieces. As a great scientist, he figured out that there was exactly one way to restore the parquet by filling the damaged area of the parquet with the non-overlapping\n1×2\ncell shaped pieces.\nHelp historians to check Archimedes' calculations. For the given configuration of the\n2×n\nparquet floor, determine whether there is exactly one way to fill the damaged parquet cells with the\n1×2\ncell parquet pieces. If Archimedes was wrong, find out whether there are multiple ways to restore the parquet, or there are no ways at all.",
    "input_specification": "The first line contains a single integer\nT\n(\n1≤T≤104\n) — the number of test cases to solve.\nThen the description of test cases follows.\nThe first line of each test case contains a single integer\nn\n(\n1≤n≤2⋅105\n) — the length of the parquet floor.\nThe following two lines contain exactly\nn\ncharacters each and describe the parquet, where '.' denotes a damaged cell and '#' denotes an undamaged cell.\nThe total sum of\nn\nin all\nT\ntest cases doesn't exceed\n2⋅105\n.",
    "output_specification": "For each test case, print \"Unique\" if there is exactly one way to restore the parquet, \"Multiple\" if there are multiple ways to do so, or \"None\" if it is impossible to restore the parquet.",
    "sample_tests": [
        {
            "input": "4\n10\n#.......##\n##..#.##..\n6\n...#..\n..#...\n8\n........\n........\n3\n###\n###",
            "output": "Unique\nNone\nMultiple\nUnique"
        }
    ],
    "note": "Not found",
    "tags": [
        "constructive algorithms",
        "dp",
        "graphs"
    ],
    "rating": "1700"
}