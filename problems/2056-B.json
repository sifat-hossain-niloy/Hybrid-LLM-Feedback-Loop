{
    "statement": "You are given an undirected graph with \nn\n vertices, labeled from \n1\n to \nn\n. This graph encodes a hidden permutation\n∗\np\nof size\nn\n. The graph is constructed as follows:\nFor every pair of integers\n1≤i<j≤n\n, an undirected edge is added between vertex\npi\nand vertex\npj\nif and only if\npi<pj\n. Note that the edge is not added between vertices\ni\nand\nj\n, but between the vertices of their respective elements. Refer to the notes section for better understanding.\nYour task is to reconstruct and output the permutation\np\n. It can be proven that permutation\np\ncan be uniquely determined.\n∗\nA permutation of length\nn\nis an array consisting of\nn\ndistinct integers from\n1\nto\nn\nin arbitrary order. For example,\n[2,3,1,5,4]\nis a permutation, but\n[1,2,2]\nis not a permutation (\n2\nappears twice in the array), and\n[1,3,4]\nis also not a permutation (\nn=3\nbut there is\n4\nin the array).",
    "input_specification": "Each test contains multiple test cases. The first line contains the number of test cases\n𝑡\n(\n1≤𝑡≤500\n). The description of the test cases follows.\nThe first line of each test case contains a single integer\n𝑛\n(\n1≤𝑛≤1000\n).\nThe\n𝑖\n-th of the next\n𝑛\nlines contains a string of\n𝑛\ncharacters\n𝑔\n𝑖,1\n𝑔\n𝑖,2\n…\n𝑔\n𝑖,𝑛\n(\n𝑔\n𝑖,𝑗\n=𝟶\nor\n𝑔\n𝑖,𝑗\n=𝟷\n) — the adjacency matrix.\n𝑔\n𝑖,𝑗\n=𝟷\nif and only if there is an edge between vertex\n𝑖\nand vertex\n𝑗\n.\nIt is guaranteed that there exists a permutation\n𝑝\nwhich generates the given graph. It is also guaranteed that the graph is undirected and has no self-loops, meaning\n𝑔\n𝑖,𝑗\n=\n𝑔\n𝑗,𝑖\nand\n𝑔\n𝑖,𝑖\n=𝟶\n.\nIt is guaranteed that the sum of\n𝑛\nover all test cases does not exceed\n1000\n.",
    "output_specification": "For each test case, output\n𝑛\nintegers\n𝑝\n1\n,\n𝑝\n2\n,…,\n𝑝\n𝑛\nrepresenting the reconstructed permutation.",
    "sample_tests": [
        {
            "input": "3\n1\n0\n5\n00101\n00101\n11001\n00001\n11110\n6\n000000\n000000\n000000\n000000\n000000\n000000",
            "output": "1 \n4 2 1 3 5 \n6 5 4 3 2 1"
        }
    ],
    "note": "In the first case\n𝑝=[1]\n. Since there are no pairs\n1≤𝑖<𝑗≤𝑛\n, there are no edges in the graph.\nThe graph in the second case is shown below. For example, when we choose\n𝑖=3\nand\n𝑗=4\n, we add an edge between vertices\n𝑝\n𝑖\n=1\nand\n𝑝\n𝑗\n=3\n, because\n𝑝\n𝑖\n<\n𝑝\n𝑗\n. However, when we choose\n𝑖=2\nand\n𝑗=3\n,\n𝑝\n𝑖\n=2\nand\n𝑝\n𝑗\n=1\n, so\n𝑝\n𝑖\n<\n𝑝\n𝑗\ndoesn't hold. Therefore, we don't add an edge between\n2\nand\n1\n.\n\nIn the third case, there are no edges in the graph, so there are no pairs of integers\n1≤𝑖<𝑗≤𝑛\nsuch that\n𝑝\n𝑖\n<\n𝑝\n𝑗\n. Therefore,\n𝑝=[6,5,4,3,2,1]\n.",
    "tags": [
        "brute force",
        "dfs and similar",
        "graphs",
        "implementation",
        "sortings"
    ],
    "rating": "1300"
}